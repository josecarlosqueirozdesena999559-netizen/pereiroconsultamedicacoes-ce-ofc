CONFIGURAÇÃO COMPLETA DO SISTEMA UBS PEREIRO - BANCO DE DADOS SUPABASE
==========================================================================

Este documento contém todas as configurações necessárias para replicar o sistema em outro banco de dados Supabase.

1. CRIAÇÃO DAS TABELAS
======================

-- Enum para tipos de usuário
CREATE TYPE public.user_role AS ENUM ('admin', 'responsavel');

-- Tabela de usuários
CREATE TABLE public.usuarios (
    id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    email TEXT NOT NULL UNIQUE,
    senha TEXT NOT NULL,
    nome TEXT NOT NULL,
    tipo user_role NOT NULL DEFAULT 'responsavel',
    criado_em TIMESTAMP WITHOUT TIME ZONE DEFAULT now()
);

-- Tabela de postos/UBS
CREATE TABLE public.postos (
    id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    nome TEXT NOT NULL,
    localidade TEXT NOT NULL,
    horario_funcionamento TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'fechado',
    responsavel_id UUID,
    atualizado_em TIMESTAMP WITHOUT TIME ZONE DEFAULT now()
);

-- Tabela de relacionamento usuário-posto (muitos para muitos)
CREATE TABLE public.usuario_posto (
    user_id UUID NOT NULL,
    posto_id UUID NOT NULL,
    PRIMARY KEY (user_id, posto_id)
);

-- Tabela de arquivos PDF
CREATE TABLE public.arquivos_pdf (
    id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    url TEXT NOT NULL,
    posto_id UUID,
    data_upload TIMESTAMP WITHOUT TIME ZONE DEFAULT now()
);

2. FUNÇÕES DO BANCO DE DADOS
============================

-- Função de login
CREATE OR REPLACE FUNCTION public.fn_login(p_email text, p_senha text)
RETURNS TABLE(id uuid, email text, nome text, tipo text)
LANGUAGE plpgsql
STABLE SECURITY DEFINER
SET search_path TO 'public'
AS $function$
BEGIN
  RETURN QUERY
  SELECT usuarios.id, usuarios.email, usuarios.nome, usuarios.tipo::text
  FROM public.usuarios
  WHERE usuarios.email = p_email
    AND usuarios.senha = crypt(p_senha, usuarios.senha);
END;
$function$;

-- Função para atualizar updated_at automaticamente
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = 'public'
AS $function$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$function$;

-- Trigger para atualizar automaticamente o campo atualizado_em
CREATE TRIGGER update_postos_updated_at
    BEFORE UPDATE ON public.postos
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

3. POLÍTICAS RLS (ROW LEVEL SECURITY)
=====================================

-- Habilitar RLS em todas as tabelas
ALTER TABLE public.usuarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.postos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.usuario_posto ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.arquivos_pdf ENABLE ROW LEVEL SECURITY;

-- Políticas para tabela usuarios
CREATE POLICY "Usuarios: Permitir todas operações"
ON public.usuarios
FOR ALL
USING (true)
WITH CHECK (true);

-- Políticas para tabela postos
CREATE POLICY "Postos: Permitir todas operações"
ON public.postos
FOR ALL
USING (true)
WITH CHECK (true);

-- Políticas para tabela usuario_posto
CREATE POLICY "Usuario_posto: Permitir todas operações"
ON public.usuario_posto
FOR ALL
USING (true)
WITH CHECK (true);

-- Políticas para tabela arquivos_pdf
CREATE POLICY "Arquivos_pdf: Permitir todas operações"
ON public.arquivos_pdf
FOR ALL
USING (true)
WITH CHECK (true);

4. CONFIGURAÇÃO DO STORAGE (BUCKET)
===================================

-- Criar bucket para medicações
INSERT INTO storage.buckets (id, name, public) 
VALUES ('medicacoes_ubs', 'medicacoes_ubs', true);

-- Políticas do Storage
CREATE POLICY "Permitir visualização pública dos arquivos"
ON storage.objects
FOR SELECT
USING (bucket_id = 'medicacoes_ubs');

CREATE POLICY "Permitir upload de arquivos"
ON storage.objects
FOR INSERT
WITH CHECK (bucket_id = 'medicacoes_ubs');

CREATE POLICY "Permitir atualização de arquivos"
ON storage.objects
FOR UPDATE
USING (bucket_id = 'medicacoes_ubs');

CREATE POLICY "Permitir exclusão de arquivos"
ON storage.objects
FOR DELETE
USING (bucket_id = 'medicacoes_ubs');

5. DADOS INICIAIS (OPCIONAL)
============================

-- Inserir usuário administrador padrão
INSERT INTO public.usuarios (email, senha, nome, tipo) 
VALUES (
    'admin@pereiro.ce.gov.br', 
    crypt('admin123', gen_salt('bf')), 
    'Administrador do Sistema', 
    'admin'
);

-- Inserir alguns postos de exemplo
INSERT INTO public.postos (nome, localidade, horario_funcionamento, status) VALUES
('UBS Centro', 'Centro', '07:00 - 17:00', 'aberto'),
('UBS São José', 'São José', '07:00 - 17:00', 'fechado'),
('UBS Vila Nova', 'Vila Nova', '07:00 - 17:00', 'aberto');

6. CONFIGURAÇÕES ADICIONAIS
===========================

-- Habilitar extensão para criptografia de senhas
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- Configurar timezone (opcional)
SET timezone = 'America/Fortaleza';

7. VERIFICAÇÕES DE SEGURANÇA
============================

-- Verificar se RLS está habilitado em todas as tabelas
SELECT schemaname, tablename, rowsecurity 
FROM pg_tables 
WHERE schemaname = 'public' AND rowsecurity = true;

-- Verificar políticas criadas
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual, with_check
FROM pg_policies 
WHERE schemaname = 'public';

8. OBSERVAÇÕES IMPORTANTES
=========================

1. Altere as senhas padrão antes de usar em produção
2. Configure as variáveis de ambiente no seu projeto:
   - SUPABASE_URL: sua URL do Supabase
   - SUPABASE_ANON_KEY: sua chave anônima do Supabase
3. As políticas RLS estão configuradas como permissivas (true) para simplicidade
4. Em produção, considere implementar políticas mais restritivas baseadas em autenticação
5. O bucket de storage está configurado como público para facilitar o acesso aos PDFs
6. Teste todas as funcionalidades após a configuração

9. COMANDOS DE VERIFICAÇÃO
=========================

-- Verificar se as tabelas foram criadas
SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';

-- Verificar se as funções foram criadas
SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'public';

-- Verificar se o bucket foi criado
SELECT * FROM storage.buckets WHERE name = 'medicacoes_ubs';

-- Testar função de login (substitua pelos dados reais)
SELECT * FROM public.fn_login('admin@pereiro.ce.gov.br', 'admin123');

10. COMO MIGRAR PARA OUTRO PROJETO SUPABASE - PASSO A PASSO VISUAL
===============================================================================

Para conectar este sistema a outro projeto Supabase, siga estes passos:

A. CRIANDO UM NOVO PROJETO SUPABASE
-----------------------------------
1. Acesse https://supabase.com
2. Clique em "New project" ou "Start your project"
3. Escolha sua organização
4. Preencha:
   - Name: "UBS Pereiro" (ou nome de sua escolha)
   - Database Password: crie uma senha forte (anote ela!)
   - Region: South America (São Paulo) - mais próximo do Brasil
5. Clique em "Create new project"
6. Aguarde alguns minutos para o projeto ser criado

B. ONDE ENCONTRAR AS CHAVES DO SUPABASE
----------------------------------------
Após o projeto ser criado:

1. CHAVES DE API (Project API keys):
   - No painel lateral esquerdo, vá em "Settings" (Configurações) 
   - Clique em "API"
   - Você verá duas chaves importantes:
     
     📋 anon / public key (CHAVE PÚBLICA):
     [texto longo começando com "eyJhbGciOiJIUzI1NiIs..."]
     
     🔒 service_role key (CHAVE PRIVADA - CUIDADO!):
     [texto longo começando com "eyJhbGciOiJIUzI1NiIs..."]

2. PROJECT URL:
   - Na mesma tela "Settings > API"
   - Procure por "Project URL"
   - Exemplo: https://xyzabc123.supabase.co

3. PROJECT ID:
   - É a parte antes de ".supabase.co" na URL
   - Exemplo: se a URL é https://xyzabc123.supabase.co
   - Então o ID é: xyzabc123

C. EXECUTANDO OS SCRIPTS SQL NO SUPABASE
----------------------------------------
1. No painel lateral esquerdo do Supabase, clique em "SQL Editor"
2. Clique no botão "New query" para criar uma nova consulta
3. Cole TODO o código SQL das seções 1-6 deste documento:
   
   📝 COPIE E COLE EXATAMENTE ASSIM:
   - Primeiro: Seção 1 (Criação das tabelas) - Cole e clique "Run"
   - Segundo: Seção 2 (Funções) - Cole e clique "Run" 
   - Terceiro: Seção 3 (Políticas RLS) - Cole e clique "Run"
   - Quarto: Seção 4 (Storage) - Cole e clique "Run"
   - Quinto: Seção 5 (Dados iniciais) - Cole e clique "Run"
   - Sexto: Seção 6 (Configurações) - Cole e clique "Run"

4. Se houver erros, leia a mensagem e tente novamente
5. Para verificar se deu certo, execute: 
   SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';

D. VERIFICANDO O STORAGE (BUCKET)
---------------------------------
1. No painel lateral, clique em "Storage"
2. Você deve ver o bucket "medicacoes_ubs" criado
3. Se não aparecer, volte no SQL Editor e execute novamente a Seção 4

E. ALTERANDO AS CONFIGURAÇÕES NO SEU PROJETO
--------------------------------------------
Agora você precisa alterar 3 arquivos no seu código:

1. 📄 Arquivo .env (na raiz do projeto):
   Substitua pelos novos valores:
   VITE_SUPABASE_PROJECT_ID="[seu-novo-project-id]"
   VITE_SUPABASE_PUBLISHABLE_KEY="[sua-nova-anon-key]"
   VITE_SUPABASE_URL="https://[seu-novo-project-id].supabase.co"

2. 📄 Arquivo supabase/config.toml:
   Substitua:
   project_id = "[seu-novo-project-id]"

3. 📄 Arquivo src/integrations/supabase/client.ts:
   Substitua:
   const SUPABASE_URL = "https://[seu-novo-project-id].supabase.co";
   const SUPABASE_PUBLISHABLE_KEY = "[sua-nova-anon-key]";

⚠️ IMPORTANTE: 
- [seu-novo-project-id] = pegue da URL do seu projeto
- [sua-nova-anon-key] = pegue da página Settings > API (anon key)

F. TESTANDO SE FUNCIONOU
-----------------------
1. Reinicie seu servidor local (Ctrl+C e npm run dev novamente)
2. Tente fazer login com:
   📧 Email: admin@pereiro.ce.gov.br
   🔒 Senha: admin123
3. Se conseguir entrar, tudo funcionou!

G. ONDE VER OS DADOS NO SUPABASE
---------------------------------
1. Clique em "Table Editor" no painel lateral
2. Você verá as tabelas: usuarios, postos, usuario_posto, arquivos_pdf
3. Clique em cada uma para ver os dados
4. Para ver logs de erro, vá em "Logs" no painel lateral

H. PROBLEMAS COMUNS E SOLUÇÕES
------------------------------
❌ "Failed to fetch" ou erro de conexão:
   ✅ Verifique se as URLs e chaves estão corretas nos 3 arquivos

❌ "relation does not exist":
   ✅ Execute novamente os scripts SQL da Seção 1

❌ Login não funciona:
   ✅ Verifique se executou a Seção 2 (funções) e Seção 5 (dados iniciais)

❌ Upload de PDF não funciona:
   ✅ Verifique se o bucket foi criado (Storage) e execute a Seção 4

❌ "Row Level Security policy violation":
   ✅ Execute novamente a Seção 3 (Políticas RLS)

IMPORTANTE:
- Sempre teste em ambiente de desenvolvimento antes de alterar produção
- Mantenha backups dos dados importantes
- As chaves Service Role devem ser mantidas em segredo
- Considere usar variáveis de ambiente para as configurações sensíveis

==========================================================================
FIM DA CONFIGURAÇÃO - SISTEMA UBS PEREIRO
==========================================================================

📋 RESUMO RÁPIDO - ONDE ENCONTRAR CADA COISA NO SUPABASE:

🔧 CONFIGURAÇÕES E CHAVES:
   Settings > API = Ver chaves (anon key, service role key, project URL)

💾 EXECUTAR CÓDIGOS SQL:
   SQL Editor > New Query = Cole os códigos SQL deste documento

📊 VER DADOS:
   Table Editor = Ver tabelas e dados (usuarios, postos, etc)

📁 VER ARQUIVOS:
   Storage > medicacoes_ubs = Ver PDFs enviados

👥 VER USUÁRIOS (se usar auth):
   Authentication > Users = Ver usuários cadastrados

📈 VER LOGS E ERROS:
   Logs = Ver erros do sistema

🌐 CONFIGURAR DOMÍNIO:
   Settings > General = Configurar URL personalizada

🔒 POLÍTICAS DE SEGURANÇA:
   Authentication > Policies = Ver políticas RLS

==========================================================================